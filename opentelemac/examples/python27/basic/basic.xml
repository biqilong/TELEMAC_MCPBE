<?xml version="1.0"?>
<validation xref="basic" rank="2" tags="python2">

<!-- Extras and Meta Data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
   <deco xref="default">
      <look format="png" colourbar="jet.xml" />
      <data title="Sub-critical flow over a bump" author="R-S MOURADI" />
   </deco>

<!-- Filter for negative value in red and positive in blue-->
<deco xref="BAR_NEGATIVE" >
  <look cmap="RdBu" levels="np.arange(-0.1,0.1,0.0999)" extend="'max'"/>
</deco>
<!-- Domain background , forced to grey color-->
<deco xref="BAR_GREY" >
  <look cmap="Greys" levels="np.arange(0.0,1000.0,500.)" extend="'max'"/>
</deco>

<!-- For velocity -->
<deco xref="BAR_V" >
  <look cmap="jet" levels="np.arange(-0.6,0.6,0.1)" extend="'max'"/>
</deco>
<!-- For water depth -->
<deco xref="BAR_WD" >
  <look cmap="jet" levels="np.arange(1.0,55.0,5.0)" extend="'max'"/>
</deco>
<!-- For Bottom -->
<deco xref="BAR_B" >
  <look cmap="jet" levels="np.arange(0.0,0.3,0.05)" extend="'max'"/>
</deco>


<!-- ************************** SAVE VARIABLES  ************************** -->
<!-- Specific variable at specific time-->
 <cast xref="save:H" config="oneofall" type="2d:" time="[2]" >
   <U_3D_2 vars="velocity u:map" target="result3D.slf" />
   <Z_3D vars="elevation Z:map" type="3d:" target="result3D.slf" />
   <U_2D_2 vars="velocity u:map" target="result2D.slf" />
 </cast>

<!-- ********************** USEFUL PYTHON SCRIPTS ************************ -->
<!-- plot vertical profile of variable in specific (X;Y) point -->
   <cast xref="plotProfile" config="oneofall" type="2d:" time="[-1]" >
       <python>
def plotProfile(VAR3D, Z3D, X, Y, nplan, figName) :
         import numpy as np
         import matplotlib.pyplot as plt

	 xMesh=VAR3D.support[0]
	 yMesh=VAR3D.support[1]
	 npoin = len(xMesh)

	 #FIND NEAREST POINT IN MESH TO X;Y
	 #######################NearestPoint######################
	 xNear = 1000
	 yNear = 1000
	 iNear = -1000
         for i in range(npoin):
	     if(np.abs(xMesh[i]-X)&#60;np.abs(xNear-X)):
	         xNear = xMesh[i]

         for i in range(npoin):
	     if(xMesh[i]==xNear):
	         if(np.abs(yMesh[i]-Y)&#60;np.abs(yNear-Y)):
	             yNear = yMesh[i]
	             iNear = i
	 #########################################################

	 #######################Extract Data######################
         V = np.zeros((nplan))
	 Z = np.zeros((nplan))

	 for iplan in range(nplan):
             k=iplan*npoin+iNear
	     V[iplan] = VAR3D.values[0][0][k]
	     Z[iplan] = Z3D.values[0][0][k]
	 #########################################################

	 ########################Plot Data########################
	 fig = plt.figure()
  	 plt.plot(Z,V,'b')
	 plt.xlabel(r"Z $[m]$",fontsize = 18)
	 plt.ylabel(r"U $[m.s^{-1}]$",fontsize = 18)
	 plt.xticks(fontsize = 18)
	 plt.yticks(fontsize = 18)
         fig.tight_layout()
         if not path.exists(path.split(figName)[0]):
             mkdir(path.split(figName)[0])
	 plt.savefig(figName,format='png',dpi=400)
	 plt.clf()
	 #########################################################

	 return [], [], [], []

       </python>

       <CompareVarNUX1 vars="plotProfile(U_3D_2, Z_3D, 0.51, 0.87, 10, 'img/U_profile.png')" />
   </cast>


<!--2D plots from 3D file-->
<!-- **************************** PLANE CUTS **************************** -->
<!-- *************** MAP ************** -->
<!-- Plane XZ with Y = 0.5 -->
<plot2d xref="img/Plane_XZ_Y0v5" type="v-section" config="oneofall" time="[-1]" size="(12;5)" >
  <layer vars="velocity u:map" extract="(0;0.5)(1.6;0.5)" target="result3D.slf"  deco="BAR_V"  />
</plot2d>

<!-- Plane YZ with X = 0.14 -->
<plot2d xref="img/Plane_YZ_X1" size="(12;5)" type="v-section" time="[-1]" >
  <layer vars="velocity u:map" target="result3D.slf" config="oneofall" extract="(0.14;0)(0.14;1.0)"   deco="BAR_V"/>
</plot2d>


<!-- Plane XY with Z = plane 3 -->
<plot2d xref="img/Plane_XY_Z3" type="p-section" extract="[]#[2]" config="oneofall" size="(20;5)" >
  <layer vars="velocity u:map" target="result3D.slf" time="[-1]"  deco="BAR_V"/>
</plot2d>


</validation>
